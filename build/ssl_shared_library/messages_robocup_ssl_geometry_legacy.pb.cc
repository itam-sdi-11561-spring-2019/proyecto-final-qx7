// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_geometry_legacy.proto

#include "messages_robocup_ssl_geometry_legacy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace RoboCup2014Legacy {
namespace Geometry {
class SSL_GeometryFieldSizeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_GeometryFieldSize>
      _instance;
} _SSL_GeometryFieldSize_default_instance_;
class SSL_GeometryDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_GeometryData>
      _instance;
} _SSL_GeometryData_default_instance_;
}  // namespace Geometry
}  // namespace RoboCup2014Legacy
namespace protobuf_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto {
void InitDefaultsSSL_GeometryFieldSizeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::RoboCup2014Legacy::Geometry::_SSL_GeometryFieldSize_default_instance_;
    new (ptr) ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize::InitAsDefaultInstance();
}

void InitDefaultsSSL_GeometryFieldSize() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSSL_GeometryFieldSizeImpl);
}

void InitDefaultsSSL_GeometryDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto::InitDefaultsSSL_GeometryFieldSize();
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::InitDefaultsSSL_GeometryCameraCalibration();
  {
    void* ptr = &::RoboCup2014Legacy::Geometry::_SSL_GeometryData_default_instance_;
    new (ptr) ::RoboCup2014Legacy::Geometry::SSL_GeometryData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoboCup2014Legacy::Geometry::SSL_GeometryData::InitAsDefaultInstance();
}

void InitDefaultsSSL_GeometryData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSSL_GeometryDataImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, line_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, field_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, field_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, boundary_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, referee_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, goal_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, goal_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, goal_wall_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, center_circle_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, defense_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, defense_stretch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, free_kick_from_defense_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, penalty_spot_from_field_line_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, penalty_line_from_spot_dist_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryData, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryData, calib_),
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize)},
  { 33, 40, sizeof(::RoboCup2014Legacy::Geometry::SSL_GeometryData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::RoboCup2014Legacy::Geometry::_SSL_GeometryFieldSize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::RoboCup2014Legacy::Geometry::_SSL_GeometryData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "messages_robocup_ssl_geometry_legacy.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n*messages_robocup_ssl_geometry_legacy.p"
      "roto\022\032RoboCup2014Legacy.Geometry\032#messag"
      "es_robocup_ssl_geometry.proto\"\212\003\n\025SSL_Ge"
      "ometryFieldSize\022\022\n\nline_width\030\001 \002(\005\022\024\n\014f"
      "ield_length\030\002 \002(\005\022\023\n\013field_width\030\003 \002(\005\022\026"
      "\n\016boundary_width\030\004 \002(\005\022\025\n\rreferee_width\030"
      "\005 \002(\005\022\022\n\ngoal_width\030\006 \002(\005\022\022\n\ngoal_depth\030"
      "\007 \002(\005\022\027\n\017goal_wall_width\030\010 \002(\005\022\034\n\024center"
      "_circle_radius\030\t \002(\005\022\026\n\016defense_radius\030\n"
      " \002(\005\022\027\n\017defense_stretch\030\013 \002(\005\022#\n\033free_ki"
      "ck_from_defense_dist\030\014 \002(\005\022)\n!penalty_sp"
      "ot_from_field_line_dist\030\r \002(\005\022#\n\033penalty"
      "_line_from_spot_dist\030\016 \002(\005\"\203\001\n\020SSL_Geome"
      "tryData\022@\n\005field\030\001 \002(\01321.RoboCup2014Lega"
      "cy.Geometry.SSL_GeometryFieldSize\022-\n\005cal"
      "ib\030\002 \003(\0132\036.SSL_GeometryCameraCalibration"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 640);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages_robocup_ssl_geometry_legacy.proto", &protobuf_RegisterTypes);
  ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto
namespace RoboCup2014Legacy {
namespace Geometry {

// ===================================================================

void SSL_GeometryFieldSize::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_GeometryFieldSize::kLineWidthFieldNumber;
const int SSL_GeometryFieldSize::kFieldLengthFieldNumber;
const int SSL_GeometryFieldSize::kFieldWidthFieldNumber;
const int SSL_GeometryFieldSize::kBoundaryWidthFieldNumber;
const int SSL_GeometryFieldSize::kRefereeWidthFieldNumber;
const int SSL_GeometryFieldSize::kGoalWidthFieldNumber;
const int SSL_GeometryFieldSize::kGoalDepthFieldNumber;
const int SSL_GeometryFieldSize::kGoalWallWidthFieldNumber;
const int SSL_GeometryFieldSize::kCenterCircleRadiusFieldNumber;
const int SSL_GeometryFieldSize::kDefenseRadiusFieldNumber;
const int SSL_GeometryFieldSize::kDefenseStretchFieldNumber;
const int SSL_GeometryFieldSize::kFreeKickFromDefenseDistFieldNumber;
const int SSL_GeometryFieldSize::kPenaltySpotFromFieldLineDistFieldNumber;
const int SSL_GeometryFieldSize::kPenaltyLineFromSpotDistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_GeometryFieldSize::SSL_GeometryFieldSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto::InitDefaultsSSL_GeometryFieldSize();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
}
SSL_GeometryFieldSize::SSL_GeometryFieldSize(const SSL_GeometryFieldSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&line_width_, &from.line_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&penalty_line_from_spot_dist_) -
    reinterpret_cast<char*>(&line_width_)) + sizeof(penalty_line_from_spot_dist_));
  // @@protoc_insertion_point(copy_constructor:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
}

void SSL_GeometryFieldSize::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&line_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&penalty_line_from_spot_dist_) -
      reinterpret_cast<char*>(&line_width_)) + sizeof(penalty_line_from_spot_dist_));
}

SSL_GeometryFieldSize::~SSL_GeometryFieldSize() {
  // @@protoc_insertion_point(destructor:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  SharedDtor();
}

void SSL_GeometryFieldSize::SharedDtor() {
}

void SSL_GeometryFieldSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_GeometryFieldSize::descriptor() {
  ::protobuf_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_GeometryFieldSize& SSL_GeometryFieldSize::default_instance() {
  ::protobuf_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto::InitDefaultsSSL_GeometryFieldSize();
  return *internal_default_instance();
}

SSL_GeometryFieldSize* SSL_GeometryFieldSize::New(::google::protobuf::Arena* arena) const {
  SSL_GeometryFieldSize* n = new SSL_GeometryFieldSize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_GeometryFieldSize::Clear() {
// @@protoc_insertion_point(message_clear_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&line_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&goal_wall_width_) -
        reinterpret_cast<char*>(&line_width_)) + sizeof(goal_wall_width_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&center_circle_radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&penalty_line_from_spot_dist_) -
        reinterpret_cast<char*>(&center_circle_radius_)) + sizeof(penalty_line_from_spot_dist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_GeometryFieldSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 line_width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_line_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 field_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_field_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 field_width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_field_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 boundary_width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_boundary_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boundary_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 referee_width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_referee_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &referee_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 goal_width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_goal_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 goal_depth = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_goal_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 goal_wall_width = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_goal_wall_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_wall_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 center_circle_radius = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_center_circle_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &center_circle_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 defense_radius = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_defense_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defense_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 defense_stretch = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_defense_stretch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defense_stretch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 free_kick_from_defense_dist = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_free_kick_from_defense_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_kick_from_defense_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 penalty_spot_from_field_line_dist = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_penalty_spot_from_field_line_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &penalty_spot_from_field_line_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 penalty_line_from_spot_dist = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_penalty_line_from_spot_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &penalty_line_from_spot_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  return false;
#undef DO_
}

void SSL_GeometryFieldSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 line_width = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->line_width(), output);
  }

  // required int32 field_length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->field_length(), output);
  }

  // required int32 field_width = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->field_width(), output);
  }

  // required int32 boundary_width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->boundary_width(), output);
  }

  // required int32 referee_width = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->referee_width(), output);
  }

  // required int32 goal_width = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->goal_width(), output);
  }

  // required int32 goal_depth = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->goal_depth(), output);
  }

  // required int32 goal_wall_width = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->goal_wall_width(), output);
  }

  // required int32 center_circle_radius = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->center_circle_radius(), output);
  }

  // required int32 defense_radius = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->defense_radius(), output);
  }

  // required int32 defense_stretch = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->defense_stretch(), output);
  }

  // required int32 free_kick_from_defense_dist = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->free_kick_from_defense_dist(), output);
  }

  // required int32 penalty_spot_from_field_line_dist = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->penalty_spot_from_field_line_dist(), output);
  }

  // required int32 penalty_line_from_spot_dist = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->penalty_line_from_spot_dist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
}

::google::protobuf::uint8* SSL_GeometryFieldSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 line_width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->line_width(), target);
  }

  // required int32 field_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->field_length(), target);
  }

  // required int32 field_width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->field_width(), target);
  }

  // required int32 boundary_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->boundary_width(), target);
  }

  // required int32 referee_width = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->referee_width(), target);
  }

  // required int32 goal_width = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->goal_width(), target);
  }

  // required int32 goal_depth = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->goal_depth(), target);
  }

  // required int32 goal_wall_width = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->goal_wall_width(), target);
  }

  // required int32 center_circle_radius = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->center_circle_radius(), target);
  }

  // required int32 defense_radius = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->defense_radius(), target);
  }

  // required int32 defense_stretch = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->defense_stretch(), target);
  }

  // required int32 free_kick_from_defense_dist = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->free_kick_from_defense_dist(), target);
  }

  // required int32 penalty_spot_from_field_line_dist = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->penalty_spot_from_field_line_dist(), target);
  }

  // required int32 penalty_line_from_spot_dist = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->penalty_line_from_spot_dist(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  return target;
}

size_t SSL_GeometryFieldSize::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  size_t total_size = 0;

  if (has_line_width()) {
    // required int32 line_width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line_width());
  }

  if (has_field_length()) {
    // required int32 field_length = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_length());
  }

  if (has_field_width()) {
    // required int32 field_width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_width());
  }

  if (has_boundary_width()) {
    // required int32 boundary_width = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boundary_width());
  }

  if (has_referee_width()) {
    // required int32 referee_width = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->referee_width());
  }

  if (has_goal_width()) {
    // required int32 goal_width = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_width());
  }

  if (has_goal_depth()) {
    // required int32 goal_depth = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_depth());
  }

  if (has_goal_wall_width()) {
    // required int32 goal_wall_width = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_wall_width());
  }

  if (has_center_circle_radius()) {
    // required int32 center_circle_radius = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->center_circle_radius());
  }

  if (has_defense_radius()) {
    // required int32 defense_radius = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->defense_radius());
  }

  if (has_defense_stretch()) {
    // required int32 defense_stretch = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->defense_stretch());
  }

  if (has_free_kick_from_defense_dist()) {
    // required int32 free_kick_from_defense_dist = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->free_kick_from_defense_dist());
  }

  if (has_penalty_spot_from_field_line_dist()) {
    // required int32 penalty_spot_from_field_line_dist = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->penalty_spot_from_field_line_dist());
  }

  if (has_penalty_line_from_spot_dist()) {
    // required int32 penalty_line_from_spot_dist = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->penalty_line_from_spot_dist());
  }

  return total_size;
}
size_t SSL_GeometryFieldSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00003fff) ^ 0x00003fff) == 0) {  // All required fields are present.
    // required int32 line_width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line_width());

    // required int32 field_length = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_length());

    // required int32 field_width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_width());

    // required int32 boundary_width = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boundary_width());

    // required int32 referee_width = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->referee_width());

    // required int32 goal_width = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_width());

    // required int32 goal_depth = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_depth());

    // required int32 goal_wall_width = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_wall_width());

    // required int32 center_circle_radius = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->center_circle_radius());

    // required int32 defense_radius = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->defense_radius());

    // required int32 defense_stretch = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->defense_stretch());

    // required int32 free_kick_from_defense_dist = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->free_kick_from_defense_dist());

    // required int32 penalty_spot_from_field_line_dist = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->penalty_spot_from_field_line_dist());

    // required int32 penalty_line_from_spot_dist = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->penalty_line_from_spot_dist());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_GeometryFieldSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_GeometryFieldSize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_GeometryFieldSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
    MergeFrom(*source);
  }
}

void SSL_GeometryFieldSize::MergeFrom(const SSL_GeometryFieldSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      line_width_ = from.line_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      field_length_ = from.field_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      field_width_ = from.field_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      boundary_width_ = from.boundary_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      referee_width_ = from.referee_width_;
    }
    if (cached_has_bits & 0x00000020u) {
      goal_width_ = from.goal_width_;
    }
    if (cached_has_bits & 0x00000040u) {
      goal_depth_ = from.goal_depth_;
    }
    if (cached_has_bits & 0x00000080u) {
      goal_wall_width_ = from.goal_wall_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      center_circle_radius_ = from.center_circle_radius_;
    }
    if (cached_has_bits & 0x00000200u) {
      defense_radius_ = from.defense_radius_;
    }
    if (cached_has_bits & 0x00000400u) {
      defense_stretch_ = from.defense_stretch_;
    }
    if (cached_has_bits & 0x00000800u) {
      free_kick_from_defense_dist_ = from.free_kick_from_defense_dist_;
    }
    if (cached_has_bits & 0x00001000u) {
      penalty_spot_from_field_line_dist_ = from.penalty_spot_from_field_line_dist_;
    }
    if (cached_has_bits & 0x00002000u) {
      penalty_line_from_spot_dist_ = from.penalty_line_from_spot_dist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_GeometryFieldSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryFieldSize::CopyFrom(const SSL_GeometryFieldSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryFieldSize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;
  return true;
}

void SSL_GeometryFieldSize::Swap(SSL_GeometryFieldSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_GeometryFieldSize::InternalSwap(SSL_GeometryFieldSize* other) {
  using std::swap;
  swap(line_width_, other->line_width_);
  swap(field_length_, other->field_length_);
  swap(field_width_, other->field_width_);
  swap(boundary_width_, other->boundary_width_);
  swap(referee_width_, other->referee_width_);
  swap(goal_width_, other->goal_width_);
  swap(goal_depth_, other->goal_depth_);
  swap(goal_wall_width_, other->goal_wall_width_);
  swap(center_circle_radius_, other->center_circle_radius_);
  swap(defense_radius_, other->defense_radius_);
  swap(defense_stretch_, other->defense_stretch_);
  swap(free_kick_from_defense_dist_, other->free_kick_from_defense_dist_);
  swap(penalty_spot_from_field_line_dist_, other->penalty_spot_from_field_line_dist_);
  swap(penalty_line_from_spot_dist_, other->penalty_line_from_spot_dist_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_GeometryFieldSize::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SSL_GeometryData::InitAsDefaultInstance() {
  ::RoboCup2014Legacy::Geometry::_SSL_GeometryData_default_instance_._instance.get_mutable()->field_ = const_cast< ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize*>(
      ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize::internal_default_instance());
}
void SSL_GeometryData::clear_calib() {
  calib_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_GeometryData::kFieldFieldNumber;
const int SSL_GeometryData::kCalibFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_GeometryData::SSL_GeometryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto::InitDefaultsSSL_GeometryData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoboCup2014Legacy.Geometry.SSL_GeometryData)
}
SSL_GeometryData::SSL_GeometryData(const SSL_GeometryData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      calib_(from.calib_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:RoboCup2014Legacy.Geometry.SSL_GeometryData)
}

void SSL_GeometryData::SharedCtor() {
  _cached_size_ = 0;
  field_ = NULL;
}

SSL_GeometryData::~SSL_GeometryData() {
  // @@protoc_insertion_point(destructor:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  SharedDtor();
}

void SSL_GeometryData::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void SSL_GeometryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_GeometryData::descriptor() {
  ::protobuf_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_GeometryData& SSL_GeometryData::default_instance() {
  ::protobuf_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto::InitDefaultsSSL_GeometryData();
  return *internal_default_instance();
}

SSL_GeometryData* SSL_GeometryData::New(::google::protobuf::Arena* arena) const {
  SSL_GeometryData* n = new SSL_GeometryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_GeometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  calib_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(field_ != NULL);
    field_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_GeometryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SSL_GeometryCameraCalibration calib = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_calib()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  return false;
#undef DO_
}

void SSL_GeometryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize field = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->calib_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->calib(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoboCup2014Legacy.Geometry.SSL_GeometryData)
}

::google::protobuf::uint8* SSL_GeometryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize field = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->field_, deterministic, target);
  }

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->calib_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->calib(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  return target;
}

size_t SSL_GeometryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize field = 1;
  if (has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->field_);
  }
  // repeated .SSL_GeometryCameraCalibration calib = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->calib_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->calib(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_GeometryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_GeometryData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_GeometryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoboCup2014Legacy.Geometry.SSL_GeometryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoboCup2014Legacy.Geometry.SSL_GeometryData)
    MergeFrom(*source);
  }
}

void SSL_GeometryData::MergeFrom(const SSL_GeometryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  calib_.MergeFrom(from.calib_);
  if (from.has_field()) {
    mutable_field()->::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize::MergeFrom(from.field());
  }
}

void SSL_GeometryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryData::CopyFrom(const SSL_GeometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->calib())) return false;
  if (has_field()) {
    if (!this->field_->IsInitialized()) return false;
  }
  return true;
}

void SSL_GeometryData::Swap(SSL_GeometryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_GeometryData::InternalSwap(SSL_GeometryData* other) {
  using std::swap;
  calib_.InternalSwap(&other->calib_);
  swap(field_, other->field_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_GeometryData::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Geometry
}  // namespace RoboCup2014Legacy

// @@protoc_insertion_point(global_scope)
